<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[与SSO对接，OA系统跨域免登录的一个设计思路与demo]]></title>
    <url>%2FhelloBlog.github.io%2F2018%2F04%2F25%2F%E4%B8%8ESSO%E5%AF%B9%E6%8E%A5%EF%BC%8COA%E7%B3%BB%E7%BB%9F%E8%B7%A8%E5%9F%9F%E5%85%8D%E7%99%BB%E5%BD%95%E7%9A%84%E4%B8%80%E4%B8%AA%E8%AE%BE%E8%AE%A1%E6%80%9D%E8%B7%AF%E4%B8%8Edemo%2F</url>
    <content type="text"><![CDATA[与SSO对接，OA系统跨域免登录的一个设计思路与demoSSO与OA系统在不同的域，为优化用户体验和SSO服务器性能，希望用户在特定的条件下可以免登录 123456789101112131415161718192021222324252627Cookie sessionIdCookie = getCookieByName("oaSessionId"); if (sessionIdCookie != null) &#123; String historySessionId = sessionIdCookie.getValue(); if(StringUtils.isNotBlank(historySessionId))&#123; HttpSession historySession = SystemConstant.SESSION_MAP.get(historySessionId); if(historySession!=null)&#123; AuthorityInfo userInfoHistory = (AuthorityInfo) historySession.getAttribute("authorityInfo"); //如果userInfoHistory为null，可以考虑到持久化存储种再获取一次。 //现在这种写法受制于session的生命周期 //如果用户信息不为空，讲历史信息写入到当前session中，并返回管理页面 if(userInfoHistory != null)&#123; this._request.getSession().setAttribute("authorityInfo",userInfoHistory); //更新cookie的生命周期和历史sessiond的值 Cookie cookie = new Cookie("oaSessionId", this._request.getSession().getId()); cookie.setPath("/"); cookie.setMaxAge(60 * 60); ActionHandler.currentActionHandler()._response.addCookie(cookie); //更新全局sessionmap中的历史session信息 SystemConstant.SESSION_MAP.remove(historySessionId); SystemConstant.SESSION_MAP.put(this._request.getSession().getId(),this._request.getSession()); this._nextUrl = "/index.jsp";//自定义跳转jsp地址 return;//重定向返回 &#125; &#125; &#125; &#125; 设计思路如上，细节看代码，这里的this指代的是当前servlet，进而取得相应的req，res，一些自定义对象需要自己实现｡:.ﾟヽ(｡◕‿◕｡)ﾉﾟ.:｡+ﾟ。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Mybatis注入多数据源并动态切换的一种方法]]></title>
    <url>%2FhelloBlog.github.io%2F2018%2F04%2F19%2FMybatis%E6%B3%A8%E5%85%A5%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E5%B9%B6%E5%8A%A8%E6%80%81%E5%88%87%E6%8D%A2%E7%9A%84%E4%B8%80%E7%A7%8D%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[Mybatis注入多数据源并动态切换的一种方法当我们需要分库分表分兼容多个mysql集群的时候，如果不使用相应的中间件，也可以使用spring自带的动态切换数据源的抽象类来达到这个目的。 step1：创建一个定义多数据源枚举待用 12345678910111213141516171819/** * Description: provide for mybatis-test-space. * * @author William.He * @version 1.0 * @since 2018/4/18 17:55 */public enum DBTypeEnum &#123; one("dataSource_one"), two("dataSource_two"); private String value; DBTypeEnum(String value) &#123; this.value = value; &#125; public String getValue() &#123; return value; &#125;&#125; step2：创建一个线程安全的上下文类来获取step1中的枚举值 1234567891011121314151617181920212223242526272829303132333435/** * Description: provide for mybatis-test-space. * * @author William.He * @version 1.0 * @since 2018/4/18 17:56 */public class DbContextHolder &#123; private static final ThreadLocal&lt;String&gt; contextHolder = new ThreadLocal&lt;&gt;(); /** * 设置数据源 * @param dbTypeEnum 数据源枚举 */ public static void setDbType(DBTypeEnum dbTypeEnum) &#123; contextHolder.set(dbTypeEnum.getValue()); &#125; /** * 取得当前数据源 * * @return 数据源枚举值，对应targetDataSources的key */ static String getDbType() &#123; return contextHolder.get(); &#125; /** * 清除上下文数据,即清空数据源 */ public static void clearDbType() &#123; contextHolder.remove(); &#125;&#125; step3：创建一个动态数据源继承自spring的动态数据源抽象类,并获取到相应的数据源枚举值 123456789101112131415161718/** * Description: provide for mybatis-test-space. * 动态切换数据源 * @author William.He * @version 1.0 * @since 2018/4/18 17:53 */public class DynamicDataSource extends AbstractRoutingDataSource &#123; /** * 取得当前使用哪个数据源 * @return datasource bean */ @Override protected Object determineCurrentLookupKey() &#123; return DbContextHolder.getDbType(); &#125;&#125; step4：将step3的动态数据源注入到mybatis初始化sqlSessionFactoryBean中，这里采用的是MP的注入方式 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475/** * Description: provide for mybatis-test-space. * * @author William.He * @version 1.0 * @since 2018/4/17 15:37 */@Configuration@MapperScan(basePackages = &#123;"com.pax.dal.dao"&#125;)//扫描接口public class MybatisPlusConfig &#123; @Resource(name = "dataSource") private DataSource dataSource; @Resource(name = "dataSource2") private DataSource dataSource2;// @Resource(name = "dynamicDataSource")// private DynamicDataSource dynamicDataSource; @Bean("mybatisSqlSession") public SqlSessionFactory sqlSessionFactory(DynamicDataSource dynamicDatasource, ResourceLoader resourceLoader, GlobalConfiguration globalConfiguration) throws Exception &#123; MybatisSqlSessionFactoryBean sqlSessionFactory = new MybatisSqlSessionFactoryBean(); sqlSessionFactory.setDataSource(dynamicDatasource);//Dynamic动态的 sqlSessionFactory.setTypeAliasesPackage("com.pax.dal.dao");//扫描model类 //获取自定义mapper文件的位置 sqlSessionFactory.setMapperLocations(new PathMatchingResourcePatternResolver().getResources("classpath*:com.pax.dal.sqlMapper/*.xml")); MybatisConfiguration configuration = new MybatisConfiguration(); configuration.setDefaultScriptingLanguage(MybatisXMLLanguageDriver.class); configuration.setJdbcTypeForNull(JdbcType.NULL); sqlSessionFactory.setConfiguration(configuration); sqlSessionFactory.setPlugins(new Interceptor[]&#123;// new PaginationInterceptor(), //性能分析，慢查询报警 new PerformanceInterceptor(), //乐观锁 new OptimisticLockerInterceptor(), //分页插件，源生通用的 pageInterceptor() &#125;); sqlSessionFactory.setGlobalConfig(globalConfiguration); return sqlSessionFactory.getObject(); &#125; @Bean public GlobalConfiguration globalConfiguration() &#123; GlobalConfiguration conf = new GlobalConfiguration(new LogicSqlInjector()); conf.setLogicDeleteValue("-1"); conf.setLogicNotDeleteValue("1"); //全局主键默认类型，优先级次于@tableid注解 conf.setIdType(2); //下划线支持 conf.setDbColumnUnderline(true);// conf.setMetaObjectHandler(new H2MetaObjectHandler());//meta元 return conf; &#125; @Bean private DynamicDataSource dynamicDataSource()&#123; DynamicDataSource control = new DynamicDataSource(); control.setDefaultTargetDataSource(dataSource); Map&lt;Object,Object&gt; targetDataSources = new HashMap&lt;&gt;(); targetDataSources.put("dataSource_one",dataSource); targetDataSources.put("dataSource_two",dataSource2); control.setTargetDataSources(targetDataSources); return control; &#125; private PageInterceptor pageInterceptor() &#123; PageInterceptor pageInterceptor = new PageInterceptor(); Properties properties = new Properties(); properties.put("helperDialect", "mysql"); pageInterceptor.setProperties(properties); return pageInterceptor; &#125; step5：事务管理中的动态数据源同样使用step3创建的动态数据源注入 123456@Bean(name = "txManager") public DataSourceTransactionManager dataSourceTransactionManager(DynamicDataSource dynamicDatasource) &#123; DataSourceTransactionManager dataSourceTransactionManager = new DataSourceTransactionManager(); dataSourceTransactionManager.setDataSource(dynamicDatasource); return dataSourceTransactionManager; &#125; finally：配置的细节需要自己丰富，除此之外，就请愉快的使用吧， 使用 Demo： 123456789@Test public void testMysql()&#123; //切换数据源 DbContextHolder.setDbType(DBTypeEnum.one); //System.out.println(pax); //int i = pax.deleteByAutoId(7); List&lt;User&gt; users = pax.selectList(new EntityWrapper&lt;User&gt;()); System.out.println(users); &#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[传统singleton对象的正确打开方式๑乛◡乛๑]]></title>
    <url>%2FhelloBlog.github.io%2F2018%2F04%2F01%2F%E4%BC%A0%E7%BB%9Fsingleton%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F%E0%B9%91%E4%B9%9B%E2%97%A1%E4%B9%9B%E0%B9%91%2F</url>
    <content type="text"><![CDATA[传统singleton对象的正确打开方式๑乛◡乛๑1234567891011121314151617/** * Description: provide for thirdpay-park-arena. * * @author William.He * @version 1.0 * @since 09/04/2018 12:00 PM */public class Singleton &#123; private Singleton() &#123;&#125; private static class PePeHolder&#123; private static Singleton singleton = new Singleton(); &#125; public static Singleton getInstance()&#123; return PePeHolder.singleton; &#125;&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[hello blog]]></title>
    <url>%2FhelloBlog.github.io%2F2018%2F03%2F27%2Fhello-hexo%2F</url>
    <content type="text"><![CDATA[这是builder和template设计模式的一个demo。请ignore其中略过的细节。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131import java.util.HashSet;import java.util.Iterator;import java.util.Random;import java.util.Set;/** * Description: provide for yearMeeting. * * @author William.He * @version 1.0 * @since 27/01/2018 10:02 AM */public abstract class YearMeeting &#123; public final void show(Set&lt;Emp&gt; emps, Song song) &#123; gatherTogether(emps); boolean empSinging = sing(emps, song); if (bossIsHappy(emps, empSinging)) &#123; getBossSunshine(emps); raisesGiven(); &#125; getBossSunshine(emps); goF__kYourself(); &#125; public abstract boolean sing(Set&lt;Emp&gt; emps, Song song); public abstract void goF__kYourself(); public void raisesGiven() &#123; throw new RuntimeException("everyone singing tomorrow is better than those oranges"); &#125; public boolean bossIsHappy(Set&lt;Emp&gt; emps, boolean bossSatisfied) &#123; Iterator&lt;Emp&gt; iterator = emps.iterator(); boolean isKneel = true; while (iterator.hasNext()) &#123; Emp emp = iterator.next(); isKneel = isKneel &amp;&amp; emp.isKneel(); &#125; return isKneel &amp;&amp; bossSatisfied &amp;&amp; (new Random().nextInt(100) &gt; 50); &#125; public abstract void getBossSunshine(Set&lt;Emp&gt; emps); public void BossRewardSomething(Emp emp) &#123; System.out.println("Boss reward " + emp.getName() + " someThing"); &#125; private void gatherTogether(Set&lt;Emp&gt; emps) &#123; if (emps == null) &#123; throw new RuntimeException("the big Qing is gone"); &#125; if (emps.size() &lt; 10) &#123; System.out.println("the coward is gone"); &#125; Iterator&lt;Emp&gt; iterator = emps.iterator(); while (iterator.hasNext()) &#123; Emp emp = iterator.next(); emp.checkIn(emp); &#125; &#125; public static void main(String[] args) &#123; Set&lt;Emp&gt; pzs = new HashSet&lt;&gt;(); Song song = new Song(); Emp emp = new Emp(); emp.show(pzs,song); &#125;&#125;class Emp extends YearMeeting &#123; private String name; private boolean kneel; private boolean stomachIssure; void checkIn(Emp emp) &#123; System.out.println(emp.getName() + " draw your big Name"); &#125; @Override public void getBossSunshine(Set&lt;Emp&gt; emps) &#123; System.out.println("Boss reward " + new Emp().getName() + " 200 TrafficCard"); &#125; @Override public void goF__kYourself() &#123; System.out.println("fill your f__king mouth and shut the f__k up"); &#125; @Override public boolean sing(Set&lt;Emp&gt; emps, Song song) &#123; Iterator&lt;Emp&gt; iterator = emps.iterator(); while (iterator.hasNext())&#123; Emp next = iterator.next(); if(song.isDisgusting())&#123; next.setStomachIssure(true); iterator.remove(); &#125; &#125; return emps.size()&gt;0; &#125; protected boolean isKneel() &#123; return this.kneel; &#125; protected String getName() &#123; return this.name; &#125; public boolean getStomachIssure() &#123; return false; &#125; public void setStomachIssure(boolean stomachIssure) &#123; this.stomachIssure = stomachIssure; &#125;&#125;class Song &#123; private String name; private boolean disgusting; protected String getName()&#123; return this.name; &#125; protected boolean isDisgusting()&#123; return this.disgusting; &#125;&#125;]]></content>
  </entry>
</search>
